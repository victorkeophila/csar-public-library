tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.ystia.topologies.mongodb_cluster_1shard
  template_version: 3.0-SNAPSHOT
  template_author: Bull

imports:
  - tosca-normative-types:1.0.0-ALIEN20SM5
  - org.ystia.mongodb.pub:3.0-SNAPSHOT
  - org.ystia.mongodb.linux.bash:3.0-SNAPSHOT

topology_template:
  description: A topology template for a cluster MongoDB with 3 Config Server nodes and 1 Shard as a 3 Replica Server nodes

  # Inputs properties

  inputs:
    routermain_port:
      type: integer
      required: true
      default: 27017
      constraints:
        - in_range: [8000, 65535]
    configsvr_port:
      type: integer
      required: true
      default: 27200
      constraints:
        - in_range: [8000, 65535]
    rep1_port:
      type: integer
      required: true
      default: 27017
      constraints:
        - in_range: [8000, 65535]
    mongo_repo:
      type: string
      required: false
      default: https://repo.mongodb.org/yum/redhat/7/mongodb-org/3.2/x86_64
    replica_set:
      type: string
      required: true
      default: replica1
    shard:
      type: boolean
      required: true
      default: true
      description: To enable the Replica Set to be a Shard or not

  node_templates:

    # Network

    Network:
      type: tosca.nodes.Network
      properties:
        ip_version: 4

    # VM for MongoDB Replica Main Server

    C_ShardMain:
      type: tosca.nodes.Compute
      requirements:
        - network:
            node: Network
            relationship: tosca.relationships.Network
    MongoReplicaMain:
      type: org.ystia.mongodb.linux.bash.nodes.MongoReplicaMain
      properties:
        db_port: { get_input: rep1_port }
        mongo_repo: { get_input: mongo_repo }
        replica_set: { get_input: replica_set }
        shard: { get_input: shard }
      requirements:
        - host:
            node: C_ShardMain
        - primary2secondary:
            node: MongoReplicaSlave2
        - primary2secondary:
            node: MongoReplicaSlave1

    # VM for MongoDB Replica Slave 1 Server

    C_ShardSlave1:
      type: tosca.nodes.Compute
      requirements:
        - network:
            node: Network
            relationship: tosca.relationships.Network
    MongoReplicaSlave1:
      type: org.ystia.mongodb.linux.bash.nodes.MongoReplicaSlave
      properties:
        db_port: { get_input: rep1_port }
        mongo_repo: { get_input: mongo_repo }
        replica_set: { get_input: replica_set }
        shard: { get_input: shard }
      requirements:
        - host:
            node: C_ShardSlave1

    # VM for MongoDB Replica Slave 2 Server

    C_ShardSlave2:
      type: tosca.nodes.Compute
      requirements:
        - network:
            node: Network
            relationship: tosca.relationships.Network
    MongoReplicaSlave2:
      type: org.ystia.mongodb.linux.bash.nodes.MongoReplicaSlave
      properties:
        db_port: { get_input: rep1_port }
        mongo_repo: { get_input: mongo_repo }
        replica_set: { get_input: replica_set }
        shard: { get_input: shard }
      requirements:
        - host:
            node: C_ShardSlave2

    # VM for MongoDB Router and Config Server 1

    C_Router1:
      type: tosca.nodes.Compute
      requirements:
        - network:
            node: Network
            relationship: tosca.relationships.Network
    ConfigServer1:
      type: org.ystia.mongodb.linux.bash.nodes.MongoConfigServer
      properties:
        db_port: { get_input: configsvr_port }
        mongo_repo: { get_input: mongo_repo }
      requirements:
        - host:
            node: C_Router1
    MongoRouter:
      type: org.ystia.mongodb.linux.bash.nodes.MongoRouter
      properties:
        db_port: { get_input: routermain_port }
        mongo_repo: { get_input: mongo_repo }
      requirements:
        - host:
            node: C_Router1
        - router2replicaset:
            node: MongoReplicaMain
        - router2config:
            node: ConfigServer1
        - router2config:
            node: ConfigServer2
        - router2config:
            node: ConfigServer3

    # VM for MongoDB Config Server 2

    C_Router2:
      type: tosca.nodes.Compute
      requirements:
        - network:
            node: Network
            relationship: tosca.relationships.Network
    ConfigServer2:
      type: org.ystia.mongodb.linux.bash.nodes.MongoConfigServer
      properties:
        db_port: { get_input: configsvr_port }
        mongo_repo: { get_input: mongo_repo }
      requirements:
        - host:
            node: C_Router2

    # VM for MongoDB Config Server 3

    C_Router3:
      type: tosca.nodes.Compute
      requirements:
        - network:
            node: Network
            relationship: tosca.relationships.Network
    ConfigServer3:
      type: org.ystia.mongodb.linux.bash.nodes.MongoConfigServer
      properties:
        db_port: { get_input: configsvr_port }
        mongo_repo: { get_input: mongo_repo }
      requirements:
        - host:
            node: C_Router3
