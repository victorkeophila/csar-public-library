tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.alien4cloud.nginx.nginx_sh
  template_version: 1.4.0-SNAPSHOT
  template_author: alien4cloud

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - org.alien4cloud.alien4cloud.webapp:1.4.0-SNAPSHOT

node_types:
  org.alien4cloud.nginx.nginx_sh.nodes.Nginx:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      NGINX web server and reverse proxy installation.
    tags:
      icon: /images/nginx.png
    properties:
      listen_port:
        description: The port onto the http server will be listening.
        type: integer
        required: true
        default: 80
      target_protocol:
        type: string
        required: true
        default: http
        constraints:
          - valid_values: ["http", "https"]
      ca_passphrase:
        description: The provided CA certificate passphrase.
        type: string
        required: false
      front_protocol:
        type: string
        required: true
        default: http
        constraints:
          - valid_values: ["http", "https"]
    attributes:
      service_url: { concat: [get_property: [SELF, front_protocol], "://", get_attribute: [HOST, public_ip_address], ":", get_property: [SELF, listen_port]] }
    interfaces:
      Standard:
        create:
          implementation: scripts/nginx/create.sh
        configure:
          inputs:
            LISTEN_PORT: { get_property: [SELF, listen_port] }
            SERVER_NAME: { get_attribute: [HOST, public_ip_address] }
            TARGET_PROTOCOL: { get_property: [SELF, target_protocol] }
            FRONT_PROTOCOL: { get_property: [SELF, front_protocol] }
            CA_PASSPHRASE: { get_property: [SELF, ca_passphrase] }
          implementation: scripts/nginx/configure.sh
        start:
          implementation: scripts/nginx/start.sh
    artifacts:
      - config:
          file: config/nginx
          type: tosca.artifacts.File
      - ssl:
          file: ssl
          type: tosca.artifacts.File
      - commons:
          file: scripts/commons
          type: tosca.artifacts.File

  org.alien4cloud.nginx.nginx_sh.nodes.ConsulTemplate4Nginx:
    derived_from: tosca.nodes.SoftwareComponent
    description: |
      Consul-Template is a smart tool that can listen for consul changes,
      use templates to update config files on changes, and call a command. It can be
      used for example to update reverse proxy config and reload it.
    tags:
      icon: /images/consul_template.png
    capabilities:
      consul:
        type: org.alien4cloud.consul.pub.capabilities.ConsulClient
    requirements:
      - consul:
          capability: org.alien4cloud.consul.pub.capabilities.ConsulAgent
          relationship: org.alien4cloud.consul.relationships.ConnectToConsulAgent
          occurrences: [ 1, 1 ]
    properties:
      download_url:
        type: string
        required: true
        default: "https://releases.hashicorp.com/consul-template/0.15.0/consul-template_0.15.0_linux_amd64.zip"
      listen_port:
        type: integer
        required: true
        default: 8080
      front_protocol:
        type: string
        required: true
        default: http
        constraints:
          - valid_values: ["http", "https"]
      target_protocol:
        type: string
        required: true
        default: http
        constraints:
          - valid_values: ["http", "https"]
    interfaces:
      Standard:
        create:
          inputs:
            APPLICATION_URL: { get_property: [SELF, download_url] }
          implementation: scripts/consul_template/create.sh
        configure:
          inputs:
            LISTEN_PORT: { get_property: [SELF, listen_port] }
            SERVER_NAME: { get_attribute: [HOST, public_ip_address] }
            TLS_ENABLED: { get_property: [SELF, consul, tls_enabled] }
            CA_PASSPHRASE: { get_property: [SELF, consul, ca_passphrase] }
            TARGET_PROTOCOL: { get_property: [SELF, target_protocol] }
            FRONT_PROTOCOL: { get_property: [SELF, front_protocol] }
          implementation: scripts/consul_template/configure.sh
        start:
          implementation: scripts/consul_template/start.sh
    artifacts:
      - config:
          file: config/consul_template
          type: tosca.artifacts.File
      - ssl:
          file: ssl
          type: tosca.artifacts.File
      - commons:
          file: scripts/commons
          type: tosca.artifacts.File
